name: Commit Stage # 워크플로우 이름
on: push # 새 코드를 저장소로 푸시하면 워크플로를 시작하는 트리거

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hongs429/catalog-service
  VERSION: lastest

jobs:
  build: # 고유 식별자
    name: Build and Test # 작업 친화적인 명칭
    runs-on: ubuntu-22.04 # 작업 실행의 머신 유형
    permissions: # 작업에 부여된 권한
      contents: read # 현재 깃 저장소를 체크 아웃할 수 있는 권한
      security-events: write # 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with: # 액션의 내용을 정의. 보통 액션에서 제공하는 키값에 정보를 입력
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan # 현재 단계의 식별자를 할당. 이후 단계에서 참고 가능
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Build, unit tets and integration tests
        run: |
          chmod +x gradlew
          ./gradlew build

  package: # 고유 식별자
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }}  # 잡을 main 브랜치에 대해서만 실행한다
    needs: [build] # 실행 조건. build 식별자 단계가 수행된 이후에만 동작
    runs-on: ubuntu-22.04
    permissions:
      contents: read # 현재 깃 저장소를 체크아웃하기 위한 권한
      packages: write # 깃허브 컨테이너 저장소로 이미지를 업로드하기 위한 권한
      security-events: write # 깃허브로 보안 이벤트를 제출하기 위한 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3 # 현재 깃 저장소(catalog-service)를 체크아웃한다
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container name
        # 컨테이너 이미지를 빌드하고 릴리스 후보를 위한 이름을 정의하기 위해 스프링 부트의 빌드팩 통합을 사용
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
          --imageName ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.VERSION}}
      - name: OCI image vulnerability report
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.VERSION}}
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v2 # 깃허브 컨테이너 저장소와 인증한다
        with:
          registry: ${{env.REGISTRY}} # 저장소 정보는 환경변수로 정의된다
          username: ${{github.actor}} # 깃허브 액션이 제공하는 현재 사용자의 깃허브 유저명
          password: ${{secrets.GITHUB_TOKEN}} # 저장소와 인증하기 위해 필요한 토큰, 깃허브 액션이 제공
      - name: Publish container image
        run: docker push ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.VERSION}}


